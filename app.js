const myMap = L.map('map').setView([22.9074872, 79.07306671], 5);
const tileUrl = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"

// for protecting copyright issue to use opeenstreet map copy link of copyrightsession in openstreet in below of the page(openstreet)// 
const attribution= "https://www.openstreetmap.org/copyright"

const tileLayer =L.tileLayer(tileUrl, { attribution });
tileLayer.addTo(myMap)

function generateList(){
    const ul = document.querySelector(".list");
    storeList.forEach((shop)=>{
        const li = document.createElement("li");
        const div = document.createElement("div");
        const a = document.createElement("a");
        const p = document.createElement("p");

        a.addEventListener("click", ()=>{
            flyToStore(shop);
        });
        div.classList.add("shop-item");
        a.innerText = shop.properties.name;
        a.href = "#";
        p.innerText = shop.properties.address;

        div.appendChild(a);
        div.appendChild(p);
        li.appendChild(div);
        ul.appendChild(li);
        
    });
}
 generateList();

function makePopupContent(shop){
 return`
       <div>
           <h4>${shop.properties.name}</h4>
           <p>${shop.properties.address}</p>
           <div class="phone-number">
            <a href="tel: ${shop.properties.phone}"> ${shop.properties.phone}</a> </div>
       </div>
    `;
}

function onEachFeature(Feature, layer){
    layer.bindPopup(makePopupContent(Feature),{ closeButton: false, offset: L.point(0,-8)}
);
};

const myIcon = L.icon({
    iconUrl: "pizza-maker4.jpg",
    iconSize: [25,25]
});

const shopsLayer = L.geoJSON(storeList,{
   onEachFeature: onEachFeature,
   pointToLayer: function(Feature, latlng){
      return L.marker(latlng, {icon: myIcon})
   }
} );

   function flyToStore (store){
    const lat = store.geometry.coordinates[1];
    const lng =store.geometry.coordinates[0];
  
    myMap.flyTo([lat, lng], 14, {duration: 4} 
);
setTimeout(()=>{}, 3000);
    L.popup({ closeButton: false, offset: L.point(0, -8)})
    .setLatLng([lat, lng]) 
    .setContent(makePopupContent(store))
    .openOn(myMap);
 };
 shopsLayer.addTo(myMap);

                              //EXPLAINATION OF PIZZA OUTLETS MAP//

// [1] --This line creates a Leaflet map and binds it to the map div in the HTML.
//setView([22.9074872, 79.07306671], 5) centers the map at the specified latitude and longitude (which is somewhere in India) and 
//sets the zoom level to 5, meaning the map starts zoomed out.//

//[2]--L.tileLayer(tileUrl, { attribution }) creates a new tile layer using the URL and attribution, and then tileLayer.addTo(myMap) adds it to the map.//

//[3]--generateList() creates an interactive list of stores on the sidebar.
// document.querySelector(".list") selects the <ul> element where the list of pizza outlets will be added.
// The code loops through each store (storeList.forEach((shop))), creates HTML elements (li, div, a, p) to represent the name and address of each shop, and appends them to the list (ul.appendChild(li)).
// The a.addEventListener("click", ()=>{ flyToStore(shop); }); line attaches a click event to each store name (a), so when you click on it, the map will fly to the store's location.

//[4]This function generates the content that will be displayed in a popup when you click on a store marker on the map.
// It uses template literals (the ${} syntax) to insert the store's name, address, and phone into an HTML structure, so it appears nicely formatted in the popup.

// [5]--This function is used to bind a popup to each feature (store) on the map.
// layer.bindPopup() creates a popup for the given feature (store) using the content generated by the makePopupContent() function.
// The closeButton: false option removes the close button from the popup, and offset: L.point(0, -8) slightly offsets the popup from the marker for better visual alignment.

//[6]--This code defines a custom icon (pizza-maker4.jpg) that will be used for the store markers on the map.
// iconSize: [25, 25] sets the size of the icon to 25x25 pixels.

//[7]--L.geoJSON(storeList) creates a GeoJSON layer from the storeList data, which contains the store coordinates and properties.
// onEachFeature ensures that a popup is added to each store.
// pointToLayer customizes the marker by using the custom icon (myIcon) for each store.

// [8]--When a user clicks on a store in the sidebar, this function is triggered.
// flyToStore(store) takes the store's latitude (lat) and longitude (lng), and myMap.flyTo([lat, lng], 14, {duration: 4}) zooms the map to that location with a smooth animation that lasts 4 seconds.
// After zooming, a popup is displayed at that store's location with the storeâ€™s information.

//[9]--This line finally adds all the store markers (shopsLayer) to the map.
